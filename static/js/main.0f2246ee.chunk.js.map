{"version":3,"sources":["components/HeaderComponent.jsx","components/lib/data.js","components/lib/giphy.js","components/SearchComponent.jsx","components/lib/actions.js","components/lib/actionTypes.js","components/ResultItemComponent.jsx","components/ResultsComponent.jsx","components/ImagesListScreen.jsx","components/DetailComponent.jsx","components/ImageDetailsScreen.jsx","serviceWorker.js","components/lib/reducer.js","index.js"],"names":["HeaderComponent","props","className","api_key","search","term","URL","Promise","resolve","fetch","then","response","json","gifs","searchId","id","gif","connect","state","results","entries","getSearch","dispatch","a","type","giphy","payload","useState","searchInput","setSearchInput","Form","Row","Col","md","FormGroup","Label","for","Input","name","value","onChange","evt","target","Button","onClick","preventDefault","ResultItemComponent","title","source","link","message","to","src","alt","elements","data","length","map","item","url","images","downsized","key","handleItems","ImagesListScreen","Container","Component","element","selected","console","log","import_datetime","urlExternal","bitly_gif_url","image","original","image_size","size","date","Date","getDate","still","fromNow","toFixed","rel","href","ImageDetailsScreen","componentDidMount","params","match","getSearchId","this","image_title","ownProps","Boolean","window","location","hostname","initialState","middleware","applyMiddleware","reduxThunk","store","createStore","action","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f2246ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst HeaderComponent = (props) => {\n  return (\n      <div className=\"headerBar\">\n        <div className=\"logo\">\n          <span className=\"text-white\">Pop</span>\n          <span className=\"text-green\">Gifs</span>\n          <span className=\"text-white\">!</span>\n        </div>        \n      </div>\n  );      \n}\n\nexport default HeaderComponent;","/** This file should have a line to be ignored in gitignore */\nexport const api_key = 'vWSCb6TYfpm7SD97phI1D9L0icg83v9V';","import {api_key} from './data';\n\nexport const search = (term) => {\n  let URL = `http://api.giphy.com/v1/gifs/search?q=${term}&api_key=${api_key}`;\n\n  return Promise.resolve(\n    fetch(URL).then(\n      response => response.json()\n    ).then( gifs => gifs ));\n}\n\nexport const searchId = (id) => {\n  let URL = `https://api.giphy.com/v1/gifs/${id}?api_key=${api_key}`;\n\n  return Promise.resolve(\n    fetch(URL).then(\n      response => response.json()\n    ).then(gif => gif));\n}","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { getSearch } from './lib/actions';\n\nimport { Col, Row, Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst SearchComponent = (props) => {\n\n  const [searchInput, setSearchInput] = useState('');\n\n  const handleClick = (evt) => {\n    evt.preventDefault();\n    props.getSearch(searchInput)\n  };\n\n  const handleChange = (evt) => {\n    setSearchInput(evt.target.value);\n  }\n  \n  return (\n    <div>\n      <Form>\n        <Row>\n          <Col md={10}>\n            <FormGroup>\n              <Label for=\"search\">Search your interests</Label>\n              <Input type=\"text\" name=\"search\" id=\"search\" value={searchInput} onChange={handleChange} className=\"Input\" />\n            </FormGroup>\n          </Col>\n          <Col md={2} className=\"search-box\">\n            <FormGroup>\n              <Button onClick={handleClick} className=\"search-button\">Search</Button>\n            </FormGroup>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({results:state.results.entries}); /** Adapter state - component */\n\n/** HOC, curry pattern to extend redux states into component */\nexport default connect(\n  mapStateToProps,\n  { getSearch }\n)(SearchComponent); ","import * as actionTypes from './actionTypes';\nimport * as giphy from './giphy';\n\n/** Thunks */\nexport const getSearch = term => async dispatch => {\n  dispatch({\n    type: actionTypes.SEARCH_REQUEST\n  });\n  try {\n    const results = await giphy.search(term);\n    dispatch({\n      type : actionTypes.SEARCH_SUCCESS,\n      payload: results\n    })\n  } catch (e) {\n    dispatch({\n      type: actionTypes.SEARCH_FAILURE,\n      payload: e\n    })\n  }\n}\n\nexport const getSearchId = term => async dispatch => {\n  dispatch({\n    type: actionTypes.SEARCH_ID_REQUEST\n  });\n  try {\n    const results = await giphy.searchId(term);\n    dispatch({\n      type : actionTypes.SEARCH_ID_SUCCESS,\n      payload: results.data\n    })\n  } catch (e) {\n    dispatch({\n      type: actionTypes.SEARCH_ID_FAILURE,\n      payload: e\n    })\n  }\n}","export const SEARCH_REQUEST = 'SEARCH_REQUEST';\nexport const SEARCH_SUCCESS = 'SEARCH_SUCCESS';\nexport const SEARCH_FAILURE = 'SEARCH_FAILURE';\n\nexport const SEARCH_ID_REQUEST = 'SEARCH_ID_REQUEST';\nexport const SEARCH_ID_SUCCESS = 'SEARCH_ID_SUCCESS';\nexport const SEARCH_ID_FAILURE = 'SEARCH_ID_FAILURE';\n\n\n\n","import React from 'react';\nimport { Col } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nconst ResultItemComponent = (props) => {\n  const title   = props && props.title,\n        source  = props && props.link,\n        id  = props && props.id,\n        message = props && props.message;\n\n  let   item    = null;\n\n  if(message){\n    item = <h1>{message}</h1>\n  }else{\n    item = <Col>\n              <Link to={`/detail/${id}`}>\n                <img className=\"result-item sepia\" src={source} alt={title} />\n                <div className=\"item-title\">\n                  {title}\n                </div>\n              </Link>\n            </Col>\n  }\n\n  return item;\n}\n\nexport default ResultItemComponent;","import React from 'react';\nimport { Row } from 'reactstrap';\nimport ResultItemComponent from \"./ResultItemComponent\";\n\nimport { connect } from 'react-redux';\n\nconst ResultsComponent = (props) => {\n  const data       = props && props.elements.data;\n\n  const handleItems = (data) => {\n    let result  = false,\n        message = 'No results';\n    if(data && data.length > 1){\n      result = data.map(item => {  \n          const title = item && item.title,\n                url   = item && item.images.downsized.url,\n                key   = item && item.id;\n  \n          return <ResultItemComponent title={title} link={url} key={key} id={key} />;\n        })\n      \n    }else{\n      return <ResultItemComponent title={false} link={false} message={message} key=\"0\"/>;\n    }\n\n    return result;\n  }\n  \n\n  return (\n    <div className=\"items-context\">\n      <Row className=\"items-box\">\n        {handleItems(data)}\n      </Row>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({elements: state.results});\n\nexport default connect(\n  mapStateToProps, \n  {}\n)(ResultsComponent);","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport HeaderComponent from \"./HeaderComponent\";\nimport SearchComponent from './SearchComponent';\nimport ResultsComponent from './ResultsComponent';\nimport './ImageApp.css';\n\nclass ImagesListScreen extends Component {\n  render() {\n    return (\n      <div>\n        <HeaderComponent/>\n        <Container>\n          <Row>\n            <Col><SearchComponent/></Col>          \n          </Row>\n          <Row>\n            <Col><ResultsComponent/></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default ImagesListScreen;","import React from 'react';\nimport GifPlayer from 'react-gif-player'\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'reactstrap';\nimport Moment from 'react-moment';\n\nimport './ImageApp.css';\n\nconst DetailComponent = (props) => {\n  console.log(props.item)\n  const item            = props && props.item,\n        source          = item && item.images,\n        type            = item && item.type,\n        import_datetime = item && item.import_datetime,\n        urlExternal     = item && item.bitly_gif_url,   \n        image           = source && source.original,\n        image_size      = image && image.size,\n        date            = new Date(),\n        url             = image && `${image.url}?id=${date.getDate()}`,\n        still           = image && image[\"480w_still\"];\n\n  return (\n    <div className=\"reset-styles\">\n      <Row className=\"bigPic-container\">\n        <Col md=\"auto\">\n          {url && \n            <GifPlayer \n              className=\"gif-player\"\n              gif={url} \n              still={still}\n            />\n          }</Col>\n      </Row>\n      <Row className=\"details-container\">\n        <Col>\n          <span className=\"detailLabel\">Type</span><br/><span className=\"detailText\">{type}</span>\n        </Col>\n        <Col>\n        <span className=\"detailLabel\">Created</span><br/><span className=\"detailText\"><Moment fromNow={true}>{import_datetime}</Moment></span>\n        </Col>\n        <Col>\n          <span className=\"detailLabel\">Size</span><br/><span className=\"detailText\">{((image_size/1024)/1024).toFixed(2)}MB</span>\n        </Col>\n        <Col>\n          <span className=\"detailLabel\">External source</span><br/><span className=\"detailText\"><a rel=\"noopener noreferrer\" target=\"_blank\" href={urlExternal}>{urlExternal}</a></span>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({element: state.selected});\nexport default connect(\n  mapStateToProps, \n  {}\n)(DetailComponent);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Row, Label } from 'reactstrap';\nimport Slider from \"react-slick\";\n\nimport HeaderComponent from \"./HeaderComponent\";\nimport DetailComponent from \"./DetailComponent\";\n\nimport { connect } from 'react-redux';\nimport { getSearchId } from './lib/actions';\n\nimport './ImageApp.css';\n\n\nclass ImageDetailsScreen extends Component {\n\n  componentDidMount = () =>{\n    const params    = this.props && this.props.params.match.params,\n          id        = params && params.id;\n          id && this.props.getSearchId(id);\n  }\n\n  render(){ \n    const item = this.props.selected,\n          image_title = item && item.title; \n\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <div>\n        <HeaderComponent/>\n        <Container>\n          <Row>\n            <Label><Link className=\"backLink\" to=\"/\">{`< ${image_title}`}</Link></Label>           \n          </Row>\n          <Row className=\"bigPic-container\">\n            <DetailComponent item={item}/>\n          </Row>\n          <Row className=\"seeMore-container\">\n            \n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({selected: state.selected, params: ownProps});\n\nexport default connect(\n  mapStateToProps, \n  {getSearchId}\n)(ImageDetailsScreen);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actionTypes';\n\nconst initialState = {\n  results : [],\n  selected : []\n}\n\nexport default (state = initialState, action) => {\n  /** Reducer */\n  switch (action.type) {\n\n    case actionTypes.SEARCH_REQUEST:\n      return state;\n    case actionTypes.SEARCH_SUCCESS:\n      return {\n        ...state, results: action.payload\n      };\n    case actionTypes.SEARCH_FAILURE:\n      return state;\n    \n    case actionTypes.SEARCH_ID_REQUEST:\n      return state;\n    case actionTypes.SEARCH_ID_SUCCESS:\n      return {\n        ...state, selected: action.payload\n      };\n    case actionTypes.SEARCH_ID_FAILURE:\n      return state;\n\n    default:\n      return state;\n  }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ImagesListScreen from './components/ImagesListScreen'\nimport ImageDetailsScreen from \"./components/ImageDetailsScreen\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducer from './components/lib/reducer';\n\nconst middleware = applyMiddleware(reduxThunk);\nconst store      = createStore(reducer, middleware);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Route exact path=\"/\" component={ImagesListScreen} />\n      <Route exact path=\"/detail/\" component={ImageDetailsScreen} />\n      <Route exact path=\"/detail/:id\" component={ImageDetailsScreen} />\n    </Router>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}